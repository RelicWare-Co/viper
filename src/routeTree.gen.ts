/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as OrgsIndexImport } from './routes/orgs/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as CategoriesIndexImport } from './routes/categories/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as CategoriesAnotherImport } from './routes/categories/another'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrgsIndexRoute = OrgsIndexImport.update({
  id: '/orgs/',
  path: '/orgs/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesIndexRoute = CategoriesIndexImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesAnotherRoute = CategoriesAnotherImport.update({
  id: '/categories/another',
  path: '/categories/another',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/categories/another': {
      id: '/categories/another'
      path: '/categories/another'
      fullPath: '/categories/another'
      preLoaderRoute: typeof CategoriesAnotherImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/orgs/': {
      id: '/orgs/'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof OrgsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/categories/another': typeof CategoriesAnotherRoute
  '/auth': typeof AuthIndexRoute
  '/categories': typeof CategoriesIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/orgs': typeof OrgsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/categories/another': typeof CategoriesAnotherRoute
  '/auth': typeof AuthIndexRoute
  '/categories': typeof CategoriesIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/orgs': typeof OrgsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/categories/another': typeof CategoriesAnotherRoute
  '/auth/': typeof AuthIndexRoute
  '/categories/': typeof CategoriesIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/orgs/': typeof OrgsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories/another'
    | '/auth'
    | '/categories'
    | '/dashboard'
    | '/orgs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories/another'
    | '/auth'
    | '/categories'
    | '/dashboard'
    | '/orgs'
  id:
    | '__root__'
    | '/'
    | '/categories/another'
    | '/auth/'
    | '/categories/'
    | '/dashboard/'
    | '/orgs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoriesAnotherRoute: typeof CategoriesAnotherRoute
  AuthIndexRoute: typeof AuthIndexRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  OrgsIndexRoute: typeof OrgsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesAnotherRoute: CategoriesAnotherRoute,
  AuthIndexRoute: AuthIndexRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  OrgsIndexRoute: OrgsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/categories/another",
        "/auth/",
        "/categories/",
        "/dashboard/",
        "/orgs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/categories/another": {
      "filePath": "categories/another.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/categories/": {
      "filePath": "categories/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/orgs/": {
      "filePath": "orgs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
